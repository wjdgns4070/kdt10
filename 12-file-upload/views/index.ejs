<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File upload</title>

    <style>
        .profile {
            width: 200px;
            height: 200px;
            border-radius: 50%;
            box-shadow: 0 0 20px #0002;
        }
    </style>

    <!-- axios -->
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
</head>

<body>
    <h1>파일 업로드</h1>

    <h2>Single file upload</h2>
    <p>하나의 인풋에 하나의 파일을 업로드</p>

    <!-- multer는 multipart가 아닌 폼에서는 동작X 그래서 enctype=",multipart/form-data" 속성 필수 -->
    <form action="/upload" method="post" enctype="multipart/form-data">
        <input type="file" name="userfile"><br>
        <input type="text" name="title"><br><br>
        <button>업로드</button>
    </form>
    <hr>

    <h2>Multi file upload v1</h2>
    <p>하나의 인풋에 여러 개의 파일을 업로드</p>

    <!-- 하나의 인풋에 여러개 업로드 할 경우 multiple 속성 추가 -->
    <form action="/upload/array" method="post" enctype="multipart/form-data">
        <input type="file" name="userfiles" multiple><br>
        <input type="text" name="title"><br><br>
        <button>업로드</button>
    </form>

    <hr>

    <h2>Multi file upload v2</h2>
    <p>여러 개의 인풋에 각각의 파일을 업로드</p>

    <!-- 하나의 인풋에 여러개 업로드 할 경우 multiple 속성 추가 -->
    <form action="/upload/fields" method="post" enctype="multipart/form-data">
        <input type="file" name="userfile1"><br>
        <input type="text" name="title"><br><br>
        <input type="file" name="userfile2"><br>
        <input type="text" name="title"><br><br>
        <button>업로드</button>
    </form>

    <hr>
    <h2>동적 파일 업로드</h2>
    <input type="text" name="title" id="title" placeholder="TITLE">
    <input type="file" name="dynamicFile" id="dynamicFile"><br><br>
    <button type="button" onclick="fileUpload()">업로드</button>
    <br>
    <!-- 업로드한 이미지를 보여줄 img 태그 -->
    <img src="" alt="">

    <hr>
    <h2>e동적파일 업로드 실습</h2>
    <form action="/upload/plactice" method="post" enctype="multipart/form-data">
        <input type="text" name="id" id="id" placeholder="아이디">
        <input type="file" name="profile" id="profile"><br><br>
        <button>회원가입</button>

    </form>

    <hr>
    <h2>e동적파일 업로드 실습2</h2>
    <form name="submit">
        <input type="text" name="id" id="id" placeholder="아이디">
        <input type="file" name="profile" id="profile"><br><br>
        <button type="button" onclick="register()">회원가입</button>

    </form>


    <script>
        const path = require('path')
        function fileUpload() {
            // js만으로 폼 전송
            // file을 같이 전송 -> FormData 객체를 활용하기!
            // FormData란?
            // form 태그의 데이터를 동적으로 제어할 수 있는 기능, 보통 axios,ajax 등등 과 함께 사용

            const formData = new FormData();
            const file = document.querySelector('#dynamicFile');
            const title = document.querySelector('#title');

            console.log(file); // 선택한 파일 요소
            console.log(file.files); // 업로드한 파일 객체
            console.log(file.files[0]); // 업로드한 첫 파일

            // append(key, value)
            formData.append('dynamicFile', file.files[0]);
            formData.append('title', title.value);

            axios({
                method: 'post',
                url: '/dynamic',
                data: formData,
                headers: {
                    'Content-Type': 'multipart/form-data',
                    // enctype 지정과 동일
                }
            }).then((res) => {
                console.log(res.data);
                const {
                    file,
                    title
                } = res.data;

                console.log('file >', file);
                // 이미지가 저장된 경로인 file.path 이용
                const imgElem = document.querySelector('img');
                imgElem.src = '/' + file.path;
                imgElem.alt = title;
                imgElem.classList.add('profile');
            })
        }

        function register() {
            const form = document.forms['submit'];
            const formData = new FormData();
            console.log(form.id); // id 요소
            console.log(form.profile); // 파일 요소

            console.log(form.profile.files);
            console.log(form.profile.files[0].name);

            const file = form.profile.files[0];
            const fileName = form.profile.files[0].name;
            const userId = form.id.value;

            /*
            // --프론트에서 파일명 변경--
            // 변경 X
            // form.profile.files[0].name = form.id.value;
            // console.log('변경 후 :', form.profile.files[0].name);
      
            // 확장자
            const ext = fileName.split('.')[1];
            console.log('ext >', ext);
      
            const newFile = new File([file], `${userId}.${ext}`, {
              type: file.type
            });
      
            console.log('newFile >', newFile);
      
            formData.append('profile', newFile);
            */

            // multer 세부설정에서 req.body를 쓰고 싶다면, 파일을 맨 마지막에 append
            formData.append('id', userId);
            formData.append('profile', file);



            axios({
                method: 'post',
                url: '/upload/practice2',
                data: formData,
                headers: {
                    'Content-Type': 'multipart/form-data',
                }
            }).then((res) => {
                console.log(res.data);
            })
        }
    </script>

</body>

</html>